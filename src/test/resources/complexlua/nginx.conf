
user  besapp onip;
worker_processes  auto;
worker_rlimit_nofile 65535;

error_log  /beshome/besapp/logs/nginxContainer_1/nginx/error.log warn;
pid  logs/nginx.pid;


events {
    use epoll;
    worker_connections  4096;
}


http {
    include  mime.types;
    default_type  application/octet-stream;
    sendfile  on;
    tcp_nopush  on;
    tcp_nodelay  on;
    server_tokens off;
    proxy_next_upstream off;
    autoindex off;
    port_in_redirect off;
    proxy_hide_header X-Powered-By;
    proxy_pass_header Server;
    log_format beslog '$remote_addr | $remote_user | $time_local | $request_method $uri $server_protocol | $request_time | $status | $body_bytes_sent | $http_referer | $http_user_agent | $http_x_forwarded_for | $upstream_addr';
    access_log /beshome/besapp/logs/nginxContainer_1/nginx/access.log beslog;
    #access_log /beshome/besapp/logs/nginxContainer_1/nginx/access.static.log beslog;
    proxy_http_version 1.1;
    more_clear_headers "Server";
    proxy_set_header Host $http_host;
    proxy_set_header Connection "Keep-Alive";
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 8k;
    client_body_buffer_size 100m;
    client_max_body_size 100m;
    client_body_temp_path client_body;
    proxy_temp_path proxy_temp;
    client_body_timeout 30;
    client_header_timeout 30;
    keepalive_timeout  30;
    send_timeout 30;
    lua_shared_dict dogs 10m;
    lua_shared_dict  g_config 10m;
    init_by_lua '
        ngx.shared.dogs:flush_all()
        ngx.shared.dogs:flush_expired()
        dofile("/beshome/besapp/nginxContainer_1/nginx/conf/certificate_check/nginx_init.lua")
    ';
    #gzip  on;
    #proxy_redirect              off;
    include upstream.conf;
    include custom_upstream.conf;
    
    lua_shared_dict g_https_healthcheck 10m;
    lua_socket_log_errors off;
    
     init_worker_by_lua_block {
      dofile("/beshome/besapp/nginxContainer_1/nginx/conf/certificate_check/nginx_timer.lua")
      dofile("/beshome/besapp/nginxContainer_1/nginx/conf/health_check/init_worker.lua")
    }

         init_worker_by_lua_block {
         -- the following require() will just  return
                     -- the already loaded module from package.loaded:
                     ngx.say(require "cjson".encode{dog = 5, cat = 6})
        }

        set_by_lua_block $tags {
            local cjson=require("cjson")
            return cjson.encode({language="english"})
        }

         init_by_lua_block {
             print("I need no extra escaping here, for example: \r\nblah")
         }

    upstream varnish {
        server 127.0.0.1:8090 fail_timeout=4;
        server 127.0.0.1:8080 backup;
        keepalive 512;
    }

         init_by_lua_block {  print("I need no extra escaping here, for example: \r\nblah")
         }

         header_filter_by_lua_block {
    -- some custom logic to unset previously set header from
    -- upstream or by more_set_headers
    if 1 = 1 then
        ngx.header["test"] = nil
    end
    }

    server {    #@http server@
        #comment-server-1
        #comment-server-2
        listen 10.33.250.147:8080 so_keepalive=on;   #comment-directive-1
        server_name  www.bes.com;
        proxy_buffering off;
        include http_location.conf;
        include custom_http_location.conf;

    location /  
      #comment-location-1
        #comment-location-2
    {
        error_page 418 = @other;
        recursive_error_pages on;

        if ($something) {
       #comment-if-1
        #comment-if-2
            return 418;
        }

        # some configuration
    }

        location /Nginx_cert.crt {
            root conf/;
        }

        location ~* \.(css|svg|usl|uslx|wav|gif|jpg|jpeg|png|bmp|flv|js|swf|pdf|doc|ico|rtf)(\?.*)?$ {
            proxy_pass http://varnish;
        }

        location = /node_status {
            proxy_pass http://127.0.0.1:8090;
        }

        location /nginx_status {
            stub_status on;
            allow 10.33.250.147;
            deny all;
        }

        location /upstream_health {
            check_status;
            access_log off;
            allow 10.33.250.147;
            deny all;
        }

        error_page  404              /404.html;
        location = /404.html {
            root   html;
        }
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

    }

    server { #@https server@
        listen 10.33.250.147:8843 so_keepalive=on ssl;
        server_name  www.bes.com;
        proxy_buffering off;
        ssl_session_cache    shared:SSL:10m;
        ssl_session_timeout  5m;
        ssl_certificate Nginx_cert.crt;
        ssl_certificate_key server.key;
        ssl_verify_client off;
        ssl_protocols   TLSv1.1 TLSv1.2;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256;
        ssl_dhparam dhparam.pem;
        ssl_prefer_server_ciphers on;
        proxy_ssl_session_reuse on;
        ssl_certificate_by_lua_file  /beshome/besapp/nginxContainer_1/nginx/conf/certificate_check/ssl.lua;
        
        location /Nginx_cert.crt {
            root conf/;
        }
        
        location = /node_status {
            proxy_pass http://127.0.0.1:8090;
        }
        
        error_page  404              /404.html;
        location = /404.html {
            root   html;
        }
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
        include https_location.conf;
        include custom_https_location.conf;     
    }

    server {
        listen 127.0.0.1:8080 so_keepalive=on;
        proxy_buffering off;
        include http_location.conf;
        include custom_http_location.conf;
        error_page  404              /404.html;
        location = /404.html {
            root   html;
        }
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
}
